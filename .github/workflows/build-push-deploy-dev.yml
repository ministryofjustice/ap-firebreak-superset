name: CI/CD dev

on:
  pull_request:
    branches-ignore:
      - dependabot/**
  workflow_dispatch:

permissions: {}
concurrency: dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Create cert certificate-authority
          id: create-cert-authority
          shell: bash
          run: echo "${{ secrets.KUBE_CERT }}" > ca.crt
          
        - name: Authenticate to the cluster
          shell: bash
          id: authenticate
          run: |
            kubectl config set-cluster "${KUBE_CLUSTER}" --certificate-authority=ca.crt --server="${KUBE_CLUSTER}"
            kubectl config set-credentials deploy-user --token="${{ secrets.KUBE_TOKEN }}"
            kubectl config set-context "${KUBE_CLUSTER}" --cluster="${KUBE_CLUSTER}" --user=deploy-user --namespace="${{ secrets.KUBE_NAMESPACE }}"
            kubectl config use-context "${KUBE_CLUSTER}"
            
            # export flat kube config so helm image can read it
            echo 'FLAT_KUBE_CONFIG<<EOF' >> $GITHUB_ENV
            kubectl config view --flatten >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
          
        - name: Write values.yaml to env
          id: write-values-to-env
          shell: bash
          run: |
            echo 'VALUES_YAML<<EOF' >> $GITHUB_ENV
            cat ./helm_deploy/ap-firebreak-superser/values.yaml >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV

        - name: Deploy image to K8 cloud-platform-go-get-module namespace
          id: deploy-image
          uses: vimeda/helm@v1.7.0
          with:
            release: go-get-module
            namespace: ${{ secrets.KUBE_NAMESPACE }}
            chart: deploy
            values: ${{ env.VALUES_YAML }}
          env:
            KUBECONFIG_FILE: ${{ env.FLAT_KUBE_CONFIG }}
